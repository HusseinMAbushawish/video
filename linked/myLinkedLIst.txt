/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package linked.list;

/**
 *
 * @author Althega
 */
public class MyLinkedList {
    
    Node head;
  
    
   
    
    
    
    public void addFirst(int data ){
       Node newNode = new Node( data) ;
       newNode.next= head;
       head= newNode;
    }
    
    
    public void addLast(int data){
      if(head == null) {
          head = new Node(data);
          return;
      }
      Node current = head;
      while(current .next !=null){
          current = current.next;
          
      }
      
      current.next= new Node(data);
      
        
        
    }   
    
  
    
    public void print(){
       Node current =head;
       while (current != null){
           System.out.print(current.data + " --> "); 
           current= current.next;
           
       }
        
        System.out.println();
    }
       
       public Node delete(int data){
           Node current = head ; 
           Node previous = null;
           while(current.data != data){
              if(current.next == null) {
                  return null;
              }
              else{
                previous  = current ;
                current = current.next;
              }
           }
              if(current== head){
                  head= head.next;
              } else{
                 previous.next=current.next;
                 
                 
              }
           
           
       
         
                
         return current;         
       }    
       
       
       
       public void size(){
           Node current = head ;
           int result = 1;
           while(current.next != null){
             current = current.next;
              ++ result ;
               
           }
            System.out.println("the size is : " + result);
          
       }
       
      public void findMiddle()      // to find middle node 
    {
        Node slow_ptr = head;
        Node fast_ptr = head;
        if (head != null)
        {
            while (fast_ptr != null && fast_ptr.next != null)
            {
                fast_ptr = fast_ptr.next.next;
                slow_ptr = slow_ptr.next;
            }
            System.out.println("The middle element is [" +
                                slow_ptr.data + "] \n");
        }
    }

     public void addAtMid(int data)   //  to add  node in middle linked list 
    {
        // if list is empty
        if (head == null)
        head = new Node(data);
 
        else {
            // get a new node
            Node newNode = new Node(data);
 
            
            Node slow = head;
            Node fast = head.next;
 
            while (fast != null && fast.next         // when the fast pointer arrive to last node , the slow pointer arrive to the middle node
                                  != null)
            {
                 // slow pointer move one node 
                slow = slow.next;
 
                // fast pointer move  two nodes
               
                fast = fast.next.next;
            }
 
            // insert the 'newNode' and adjust
            // the required links
            newNode.next = slow.next;
            slow.next = newNode;
        }
    }
    
}
